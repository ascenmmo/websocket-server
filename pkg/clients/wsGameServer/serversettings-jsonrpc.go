// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package wsGameServer

import (
	"context"
	"fmt"
	"github.com/ascenmmo/websocket-server/pkg/clients/wsGameServer/hasher"
	"github.com/ascenmmo/websocket-server/pkg/clients/wsGameServer/jsonrpc"
	"github.com/ascenmmo/websocket-server/pkg/restconnection/types"
	"github.com/google/uuid"
)

type ClientServerSettings struct {
	*ClientJsonRPC
}

type retServerSettingsGetConnectionsNum = func(countConn int, exists bool, err error)
type retServerSettingsHealthCheck = func(exists bool, err error)
type retServerSettingsGetServerSettings = func(settings types.Settings, err error)
type retServerSettingsCreateRoom = func(err error)
type retServerSettingsGetGameResults = func(gameConfigResults []types.GameConfigResults, err error)
type retServerSettingsSetNotifyServer = func(err error)

func (cli *ClientServerSettings) GetConnectionsNum(ctx context.Context, token string) (countConn int, exists bool, err error) {

	request := requestServerSettingsGetConnectionsNum{Token: token}
	var response responseServerSettingsGetConnectionsNum
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.getconnectionsnum", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.GetConnectionsNum
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.CountConn, response.Exists, err
}

func (cli *ClientServerSettings) ReqGetConnectionsNum(ctx context.Context, callback retServerSettingsGetConnectionsNum, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.getconnectionsnum",
		Params:  requestServerSettingsGetConnectionsNum{Token: token},
	}}
	if callback != nil {
		var response responseServerSettingsGetConnectionsNum
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.GetConnectionsNum
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.CountConn, response.Exists, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientServerSettings) HealthCheck(ctx context.Context, token string) (exists bool, err error) {

	request := requestServerSettingsHealthCheck{Token: token}
	var response responseServerSettingsHealthCheck
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.healthcheck", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.HealthCheck
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Exists, err
}

func (cli *ClientServerSettings) ReqHealthCheck(ctx context.Context, callback retServerSettingsHealthCheck, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.healthcheck",
		Params:  requestServerSettingsHealthCheck{Token: token},
	}}
	if callback != nil {
		var response responseServerSettingsHealthCheck
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.HealthCheck
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Exists, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientServerSettings) GetServerSettings(ctx context.Context, token string) (settings types.Settings, err error) {

	request := requestServerSettingsGetServerSettings{Token: token}
	var response responseServerSettingsGetServerSettings
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.getserversettings", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.GetServerSettings
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Settings, err
}

func (cli *ClientServerSettings) ReqGetServerSettings(ctx context.Context, callback retServerSettingsGetServerSettings, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.getserversettings",
		Params:  requestServerSettingsGetServerSettings{Token: token},
	}}
	if callback != nil {
		var response responseServerSettingsGetServerSettings
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.GetServerSettings
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Settings, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientServerSettings) CreateRoom(ctx context.Context, token string, createRoom types.CreateRoomRequest) (err error) {

	request := requestServerSettingsCreateRoom{
		CreateRoom: createRoom,
		Token:      token,
	}
	var response responseServerSettingsCreateRoom
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.createroom", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.CreateRoom
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientServerSettings) ReqCreateRoom(ctx context.Context, callback retServerSettingsCreateRoom, token string, createRoom types.CreateRoomRequest) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.createroom",
		Params: requestServerSettingsCreateRoom{
			CreateRoom: createRoom,
			Token:      token,
		},
	}}
	if callback != nil {
		var response responseServerSettingsCreateRoom
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.CreateRoom
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientServerSettings) GetGameResults(ctx context.Context, token string) (gameConfigResults []types.GameConfigResults, err error) {

	request := requestServerSettingsGetGameResults{Token: token}
	var response responseServerSettingsGetGameResults
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.getgameresults", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.GetGameResults
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.GameConfigResults, err
}

func (cli *ClientServerSettings) ReqGetGameResults(ctx context.Context, callback retServerSettingsGetGameResults, token string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.getgameresults",
		Params:  requestServerSettingsGetGameResults{Token: token},
	}}
	if callback != nil {
		var response responseServerSettingsGetGameResults
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.GetGameResults
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.GameConfigResults, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientServerSettings) SetNotifyServer(ctx context.Context, token string, id uuid.UUID, url string) (err error) {

	request := requestServerSettingsSetNotifyServer{
		Id:    id,
		Token: token,
		Url:   url,
	}
	var response responseServerSettingsSetNotifyServer
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "serversettings.setnotifyserver", request)
	var fallbackCheck func(error) bool
	if cli.fallbackServerSettings != nil {
		fallbackCheck = cli.fallbackServerSettings.SetNotifyServer
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return err
}

func (cli *ClientServerSettings) ReqSetNotifyServer(ctx context.Context, callback retServerSettingsSetNotifyServer, token string, id uuid.UUID, url string) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "serversettings.setnotifyserver",
		Params: requestServerSettingsSetNotifyServer{
			Id:    id,
			Token: token,
			Url:   url,
		},
	}}
	if callback != nil {
		var response responseServerSettingsSetNotifyServer
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackServerSettings != nil {
				fallbackCheck = cli.fallbackServerSettings.SetNotifyServer
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}
