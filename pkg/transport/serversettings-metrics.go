// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/ascenmmo/websocket-server/pkg/restconnection"
	"github.com/ascenmmo/websocket-server/pkg/restconnection/types"
	"github.com/go-kit/kit/metrics"
	"github.com/google/uuid"
	"time"
)

type metricsServerSettings struct {
	next            restconnection.ServerSettings
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareServerSettings(next restconnection.ServerSettings) restconnection.ServerSettings {
	return &metricsServerSettings{
		next:            next,
		requestCount:    RequestCount.With("service", "ServerSettings"),
		requestCountAll: RequestCountAll.With("service", "ServerSettings"),
		requestLatency:  RequestLatency.With("service", "ServerSettings"),
	}
}

func (m metricsServerSettings) GetConnectionsNum(ctx context.Context, token string) (countConn int, exists bool, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getConnectionsNum", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getConnectionsNum", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getConnectionsNum").Add(1)

	return m.next.GetConnectionsNum(ctx, token)
}

func (m metricsServerSettings) HealthCheck(ctx context.Context, token string) (exists bool, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "healthCheck", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "healthCheck", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "healthCheck").Add(1)

	return m.next.HealthCheck(ctx, token)
}

func (m metricsServerSettings) GetServerSettings(ctx context.Context, token string) (settings types.Settings, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getServerSettings", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getServerSettings", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getServerSettings").Add(1)

	return m.next.GetServerSettings(ctx, token)
}

func (m metricsServerSettings) CreateRoom(ctx context.Context, token string, createRoom types.CreateRoomRequest) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "createRoom", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "createRoom", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "createRoom").Add(1)

	return m.next.CreateRoom(ctx, token, createRoom)
}

func (m metricsServerSettings) GetGameResults(ctx context.Context, token string) (gameConfigResults []types.GameConfigResults, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getGameResults", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getGameResults", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getGameResults").Add(1)

	return m.next.GetGameResults(ctx, token)
}

func (m metricsServerSettings) SetNotifyServer(ctx context.Context, token string, id uuid.UUID, url string) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "setNotifyServer", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "setNotifyServer", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "setNotifyServer").Add(1)

	return m.next.SetNotifyServer(ctx, token, id, url)
}
