// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/websocket-server/pkg/restconnection"
	"github.com/ascenmmo/websocket-server/pkg/restconnection/types"
	"github.com/ascenmmo/websocket-server/pkg/transport/viewer"
	"github.com/google/uuid"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerServerSettings struct {
	next restconnection.ServerSettings
}

func loggerMiddlewareServerSettings() MiddlewareServerSettings {
	return func(next restconnection.ServerSettings) restconnection.ServerSettings {
		return &loggerServerSettings{next: next}
	}
}

func (m loggerServerSettings) GetConnectionsNum(ctx context.Context, token string) (countConn int, exists bool, err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "getConnectionsNum").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestServerSettingsGetConnectionsNum{Token: token}),
				"response": viewer.Sprintf("%+v", responseServerSettingsGetConnectionsNum{
					CountConn: countConn,
					Exists:    exists,
				}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getConnectionsNum")
			return
		}
		logger.Info().Func(logHandle).Msg("call getConnectionsNum")
	}(time.Now())
	return m.next.GetConnectionsNum(ctx, token)
}

func (m loggerServerSettings) HealthCheck(ctx context.Context, token string) (exists bool, err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "healthCheck").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestServerSettingsHealthCheck{Token: token}),
				"response": viewer.Sprintf("%+v", responseServerSettingsHealthCheck{Exists: exists}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call healthCheck")
			return
		}
		logger.Info().Func(logHandle).Msg("call healthCheck")
	}(time.Now())
	return m.next.HealthCheck(ctx, token)
}

func (m loggerServerSettings) GetServerSettings(ctx context.Context, token string) (settings types.Settings, err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "getServerSettings").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestServerSettingsGetServerSettings{Token: token}),
				"response": viewer.Sprintf("%+v", responseServerSettingsGetServerSettings{Settings: settings}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getServerSettings")
			return
		}
		logger.Info().Func(logHandle).Msg("call getServerSettings")
	}(time.Now())
	return m.next.GetServerSettings(ctx, token)
}

func (m loggerServerSettings) CreateRoom(ctx context.Context, token string, createRoom types.CreateRoomRequest) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "createRoom").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestServerSettingsCreateRoom{
					CreateRoom: createRoom,
					Token:      token,
				}),
				"response": viewer.Sprintf("%+v", responseServerSettingsCreateRoom{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call createRoom")
			return
		}
		logger.Info().Func(logHandle).Msg("call createRoom")
	}(time.Now())
	return m.next.CreateRoom(ctx, token, createRoom)
}

func (m loggerServerSettings) GetGameResults(ctx context.Context, token string) (gameConfigResults []types.GameConfigResults, err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "getGameResults").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestServerSettingsGetGameResults{Token: token}),
				"response": viewer.Sprintf("%+v", responseServerSettingsGetGameResults{GameConfigResults: gameConfigResults}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getGameResults")
			return
		}
		logger.Info().Func(logHandle).Msg("call getGameResults")
	}(time.Now())
	return m.next.GetGameResults(ctx, token)
}

func (m loggerServerSettings) SetNotifyServer(ctx context.Context, token string, id uuid.UUID, url string) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "ServerSettings").Str("method", "setNotifyServer").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request": viewer.Sprintf("%+v", requestServerSettingsSetNotifyServer{
					Id:    id,
					Token: token,
					Url:   url,
				}),
				"response": viewer.Sprintf("%+v", responseServerSettingsSetNotifyServer{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call setNotifyServer")
			return
		}
		logger.Info().Func(logHandle).Msg("call setNotifyServer")
	}(time.Now())
	return m.next.SetNotifyServer(ctx, token, id, url)
}
