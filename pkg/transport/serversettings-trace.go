// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/websocket-server/pkg/restconnection"
	"github.com/ascenmmo/websocket-server/pkg/restconnection/types"
	"github.com/google/uuid"
	"github.com/opentracing/opentracing-go"
)

type traceServerSettings struct {
	next restconnection.ServerSettings
}

func traceMiddlewareServerSettings(next restconnection.ServerSettings) restconnection.ServerSettings {
	return &traceServerSettings{next: next}
}

func (svc traceServerSettings) GetConnectionsNum(ctx context.Context, token string) (countConn int, exists bool, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetConnectionsNum")
	return svc.next.GetConnectionsNum(ctx, token)
}

func (svc traceServerSettings) HealthCheck(ctx context.Context, token string) (exists bool, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "HealthCheck")
	return svc.next.HealthCheck(ctx, token)
}

func (svc traceServerSettings) GetServerSettings(ctx context.Context, token string) (settings types.Settings, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetServerSettings")
	return svc.next.GetServerSettings(ctx, token)
}

func (svc traceServerSettings) CreateRoom(ctx context.Context, token string, createRoom types.CreateRoomRequest) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "CreateRoom")
	return svc.next.CreateRoom(ctx, token, createRoom)
}

func (svc traceServerSettings) GetGameResults(ctx context.Context, token string) (gameConfigResults []types.GameConfigResults, err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "GetGameResults")
	return svc.next.GetGameResults(ctx, token)
}

func (svc traceServerSettings) SetNotifyServer(ctx context.Context, token string, id uuid.UUID, url string) (err error) {
	span := opentracing.SpanFromContext(ctx)
	span.SetTag("method", "SetNotifyServer")
	return svc.next.SetNotifyServer(ctx, token, id, url)
}
