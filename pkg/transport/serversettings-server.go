// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/ascenmmo/websocket-server/pkg/restconnection"
	"github.com/ascenmmo/websocket-server/pkg/restconnection/types"
	"github.com/google/uuid"
)

type serverServerSettings struct {
	svc               restconnection.ServerSettings
	getConnectionsNum ServerSettingsGetConnectionsNum
	healthCheck       ServerSettingsHealthCheck
	getServerSettings ServerSettingsGetServerSettings
	createRoom        ServerSettingsCreateRoom
	getGameResults    ServerSettingsGetGameResults
	setNotifyServer   ServerSettingsSetNotifyServer
}

type MiddlewareSetServerSettings interface {
	Wrap(m MiddlewareServerSettings)
	WrapGetConnectionsNum(m MiddlewareServerSettingsGetConnectionsNum)
	WrapHealthCheck(m MiddlewareServerSettingsHealthCheck)
	WrapGetServerSettings(m MiddlewareServerSettingsGetServerSettings)
	WrapCreateRoom(m MiddlewareServerSettingsCreateRoom)
	WrapGetGameResults(m MiddlewareServerSettingsGetGameResults)
	WrapSetNotifyServer(m MiddlewareServerSettingsSetNotifyServer)

	WithTrace()
	WithLog()
}

func newServerServerSettings(svc restconnection.ServerSettings) *serverServerSettings {
	return &serverServerSettings{
		createRoom:        svc.CreateRoom,
		getConnectionsNum: svc.GetConnectionsNum,
		getGameResults:    svc.GetGameResults,
		getServerSettings: svc.GetServerSettings,
		healthCheck:       svc.HealthCheck,
		setNotifyServer:   svc.SetNotifyServer,
		svc:               svc,
	}
}

func (srv *serverServerSettings) Wrap(m MiddlewareServerSettings) {
	srv.svc = m(srv.svc)
	srv.getConnectionsNum = srv.svc.GetConnectionsNum
	srv.healthCheck = srv.svc.HealthCheck
	srv.getServerSettings = srv.svc.GetServerSettings
	srv.createRoom = srv.svc.CreateRoom
	srv.getGameResults = srv.svc.GetGameResults
	srv.setNotifyServer = srv.svc.SetNotifyServer
}

func (srv *serverServerSettings) GetConnectionsNum(ctx context.Context, token string) (countConn int, exists bool, err error) {
	return srv.getConnectionsNum(ctx, token)
}

func (srv *serverServerSettings) HealthCheck(ctx context.Context, token string) (exists bool, err error) {
	return srv.healthCheck(ctx, token)
}

func (srv *serverServerSettings) GetServerSettings(ctx context.Context, token string) (settings types.Settings, err error) {
	return srv.getServerSettings(ctx, token)
}

func (srv *serverServerSettings) CreateRoom(ctx context.Context, token string, createRoom types.CreateRoomRequest) (err error) {
	return srv.createRoom(ctx, token, createRoom)
}

func (srv *serverServerSettings) GetGameResults(ctx context.Context, token string) (gameConfigResults []types.GameConfigResults, err error) {
	return srv.getGameResults(ctx, token)
}

func (srv *serverServerSettings) SetNotifyServer(ctx context.Context, token string, id uuid.UUID, url string) (err error) {
	return srv.setNotifyServer(ctx, token, id, url)
}

func (srv *serverServerSettings) WrapGetConnectionsNum(m MiddlewareServerSettingsGetConnectionsNum) {
	srv.getConnectionsNum = m(srv.getConnectionsNum)
}

func (srv *serverServerSettings) WrapHealthCheck(m MiddlewareServerSettingsHealthCheck) {
	srv.healthCheck = m(srv.healthCheck)
}

func (srv *serverServerSettings) WrapGetServerSettings(m MiddlewareServerSettingsGetServerSettings) {
	srv.getServerSettings = m(srv.getServerSettings)
}

func (srv *serverServerSettings) WrapCreateRoom(m MiddlewareServerSettingsCreateRoom) {
	srv.createRoom = m(srv.createRoom)
}

func (srv *serverServerSettings) WrapGetGameResults(m MiddlewareServerSettingsGetGameResults) {
	srv.getGameResults = m(srv.getGameResults)
}

func (srv *serverServerSettings) WrapSetNotifyServer(m MiddlewareServerSettingsSetNotifyServer) {
	srv.setNotifyServer = m(srv.setNotifyServer)
}

func (srv *serverServerSettings) WithTrace() {
	srv.Wrap(traceMiddlewareServerSettings)
}

func (srv *serverServerSettings) WithLog() {
	srv.Wrap(loggerMiddlewareServerSettings())
}
